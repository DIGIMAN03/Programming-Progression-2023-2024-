{\rtf1\ansi\ansicpg1252\cocoartf2709
\cocoatextscaling0\cocoaplatform0{\fonttbl\f0\fnil\fcharset0 Monaco;\f1\fnil\fcharset0 HelveticaNeue;}
{\colortbl;\red255\green255\blue255;}
{\*\expandedcolortbl;;}
\margl1440\margr1440\vieww11520\viewh8400\viewkind0
\pard\tx720\tx1440\tx2160\tx2880\tx3600\tx4320\tx5040\tx5760\tx6480\tx7200\tx7920\tx8640\pardirnatural\partightenfactor0

\f0\fs24 \cf0 Program heap_mem\
\pard\pardeftab560\slleading20\partightenfactor0

\f1\fs26 \cf0 #include ("stdlib.hhf");
\f0\fs24 \
\
static \
		memPointer: 	uns32;\
		number:   		int16;  \
		count:   		uns8 := 0;\
					// Must be 32-bit to record ad\
					// Using 16-bit data\
					// Count numbers, 8-bit enough\
begin heap;\
mem.alloc (1000) ;\
MOV (EAX, memPointer);\
					// Allocate 1000 bytes\
					// Save allocation address for\
stdout.put ("Enter an integer (0 to stop): "); \
stdin.get (number);\
					// Prompt and read first number\
while (number <> 0) do\
INC (count);\
MOV (number, [EAX]);\
ADD (2, EAX);\
					// Loop until read zero\
					//Counts the number of numbers\
					// Copy to memory using "regist\
					// Mov to next available space\
stdout.put ("Enter an integer (0 to stop): ");\
					// Prompt and read next number\
stdin.get (number);\
endwhile;\
for (MOV (0, CL); CL < count; INC (CI)) do\
SUB (2, EAX);\
MOV ([EAX], number) ; stdout.put (number," ");\
endfor;\
					// Print numbers in reverse order\
					// Mov to next number\
					// Copy from memory to number (indirect)\
					// obtain address of located mem\
MOV (memPointer, EAX) ;\
mem.free (EAX) ;\
end heap_mem;}